const asyncHandler = require("express-async-handler");
const User = require("../models/userModule");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const validateToken = require("../middleware/validateTokenHandler");

//register user
//POST /api/users/register
// pubic

const registerUser = asyncHandler(async (req, res) => {
  const { username, email, password } = req.body;

  if (!username || !email || !password) {
    res.status(400);
    throw new Error("All fields are Needed");
  }

  const userAvailable = await User.findOne({ email });
  if (userAvailable) {
    res.status(400);
    throw new Error("user already exists");
  }

  const hashedPassword = await bcrypt.hash(password, 10);
  console.log("Hashed password", hashedPassword);

  const user = await User.create({
    username,
    email,
    password: hashedPassword,
  });

  console.log("user created ");

  if (user) {
    res.status(201).json({
      _id: user.id,
      email: user.email,
    });
  } else {
    res.status(400);
    throw new Error("User not created");
  }

  // res.json({
  //   message: "Register the user",
  // });
});
//login user
//POST /api/users/login
// pubic

const loginUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  if ((!email, !password)) {
    res.status(400);
    throw new Error("all fields are mandatory");
  }
  const user = await User.findOne({ email });

  //compare password with hasedpassword

  if (user && (await bcrypt.compare(password, user.password))) {
    const accessToken = jwt.sign(
      {
        user: {
          username: user.username,
          email: user.email,
          id: user.id,
        },
      },
      process.env.ACCESS_TOKEN_SECRET,
      {
        expiresIn: "1m",
      }
    );

    res.status(200).json({ accessToken });
  } else {
    res.status(401);
    throw new Error("email or password is not valid");
  }
});

//current user
//POST /api/users/current
// @private

const currentUser = asyncHandler(async (req, res) => {
  res.json({
    message: "current user info",
  });
});

module.exports = {
  registerUser,
  loginUser,
  currentUser,
};

//https://www.youtube.com/watch?v=H9M02of22z4&t=1604s
